{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\maksi\\\\Documents\\\\Semestr 6\\\\IS\\\\Projekt\\\\frontend\\\\src\\\\Diagrams\\\\Diagram.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport yaml from 'js-yaml';\nimport styles from \"./diagram.module.css\";\nimport 'chart.js/auto';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Chart = () => {\n  _s();\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [selectedSector, setSelectedSector] = useState('');\n  const [countries, setCountries] = useState([]);\n  const [countryNames, setCountryNames] = useState([]);\n  const [yearOptions, setYearOptions] = useState([]);\n  const [sectorOptions, setSectorOptions] = useState([]);\n  const [co2Percentage, setCo2Percentage] = useState(0);\n  const [industryPercentage, setIndustryPercentage] = useState(0);\n  const [forestAreaPercentage, setForestAreaPercentage] = useState(0);\n  const [averagePercentage, setAveragePercentage] = useState(0);\n  const [sectorData, setSectorData] = useState([]);\n  const [tableDataCO2, setTableDataCO2] = useState([]);\n  const [tableDataIndustry, setTableDataIndustry] = useState([]);\n  const [tableDataForestArea, setTableDataForestArea] = useState([]);\n  const [percentageCO2Industry, setPercentageCO2Industry] = useState(0);\n  const [percentageCO2ForestArea, setPercentageCO2ForestArea] = useState(0);\n  const isAuthenticated = localStorage.getItem('token');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const responseCO2Emissions = await fetch('http://localhost:3000/api/co2-emissions');\n        const responseCO2EmissionsBySector = await fetch('http://localhost:3000/api/co2-emissions-by-sector');\n        const responseForestArea = await fetch('http://localhost:3000/api/forest-area');\n        if (!responseCO2Emissions.ok || !responseCO2EmissionsBySector.ok || !responseForestArea.ok) {\n          throw new Error('Network error');\n        }\n        const dataCO2Emissions = await responseCO2Emissions.json();\n        const dataCO2EmissionsBySector = await responseCO2EmissionsBySector.json();\n        const dataForestArea = await responseForestArea.json();\n        const mergeCountries = (co2EmissionsData, co2EmissionsBySectorData, forestAreaData) => {\n          const mergedData = {};\n          co2EmissionsData.forEach(country => {\n            const {\n              Entity,\n              Year,\n              'Annual CO2 emissions': emissions\n            } = country;\n            const co2EmissionsBySector = co2EmissionsBySectorData.find(sector => sector.Entity === Entity && sector.Year === Year);\n            const forestArea = forestAreaData.find(forest => forest.Entity === Entity && forest.Year === Year);\n            const countryData = {\n              Year,\n              emissions,\n              Buildings: co2EmissionsBySector ? co2EmissionsBySector.Buildings : 0,\n              Industry: co2EmissionsBySector ? co2EmissionsBySector.Industry : 0,\n              'Land-use change and forestry': co2EmissionsBySector ? co2EmissionsBySector['Land-use change and forestry'] : 0,\n              'Other fuel combustion': co2EmissionsBySector ? co2EmissionsBySector['Other fuel combustion'] : 0,\n              Transport: co2EmissionsBySector ? co2EmissionsBySector.Transport : 0,\n              'Manufacturing and construction': co2EmissionsBySector ? co2EmissionsBySector['Manufacturing and construction'] : 0,\n              'Electricity and heat': co2EmissionsBySector ? co2EmissionsBySector['Electricity and heat'] : 0,\n              forestArea: forestArea ? forestArea['Forest area'] : 0\n            };\n            if (Entity in mergedData) {\n              mergedData[Entity].data.push(countryData);\n            } else {\n              mergedData[Entity] = {\n                Entity,\n                showInfo: true,\n                data: [countryData]\n              };\n            }\n          });\n          return Object.values(mergedData);\n        };\n        const mergedCountries = mergeCountries(dataCO2Emissions.co2EmissionByCountryData, dataCO2EmissionsBySector, dataForestArea);\n        setCountries(mergedCountries);\n        const yearOptions = getYearOptions(dataCO2Emissions.co2EmissionByCountryData);\n        setYearOptions(yearOptions);\n        const countryNames = getCountryNames(dataCO2Emissions.co2EmissionByCountryData);\n        setCountryNames(countryNames);\n        const sectorOptions = getSectorOptions(dataCO2EmissionsBySector);\n        setSectorOptions(sectorOptions);\n        const filteredSectorData = mergedCountries.map(country => {\n          const selectedCountryData = country.data.find(data => data.Year === selectedCountry);\n          console.log(selectedCountryData);\n          const sectorValue = selectedCountryData && selectedCountryData[selectedSector];\n          return {\n            name: country.Entity,\n            value: sectorValue !== undefined ? sectorValue : 0\n          };\n        });\n        console.log('Merged Countries:', mergedCountries);\n        console.log('filteredSectorData:', filteredSectorData); // Добавьте эту строку\n\n        setSectorData(filteredSectorData);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, []);\n  const countryOptions = Array.from(new Set(countryNames));\n  const getYearOptions = co2EmissionsData => {\n    const years = co2EmissionsData.map(country => country.Year);\n    const uniqueYears = [...new Set(years)];\n    return uniqueYears;\n  };\n  const getCountryNames = co2EmissionsData => {\n    const countryNames = co2EmissionsData.map(country => country.Entity);\n    return countryNames;\n  };\n  const getSectorOptions = co2EmissionsBySectorData => {\n    const sectors = co2EmissionsBySectorData.reduce((options, country) => {\n      Object.keys(country).forEach(key => {\n        if (key !== 'Entity' && key !== 'Year' && key !== 'Code' && key !== '_id' && !key.startsWith('$')) {\n          options[key] = country[key];\n        }\n      });\n      return options;\n    }, {});\n    console.log('Sectors:', sectors);\n    return Object.keys(sectors);\n  };\n  const handleCountryChange = event => {\n    setSelectedCountry(event.target.value);\n  };\n  const handleSectorChange = event => {\n    setSelectedSector(event.target.value);\n    console.log('Selected Sector:', event.target.value);\n  };\n  useEffect(() => {\n    const filteredSectorData = countries.map(country => {\n      const selectedCountryData = country.data.find(data => data.Year === selectedCountry);\n      return {\n        name: country.Entity,\n        value: selectedCountryData ? selectedCountryData[selectedSector] : 0\n      };\n    });\n    setSectorData(filteredSectorData);\n  }, [selectedCountry, selectedSector, countries]);\n  const chartData = {\n    labels: yearOptions,\n    datasets: [{\n      type: 'bar',\n      label: `${selectedCountry} - ${selectedSector}`,\n      data: countries.filter(country => country.Entity === selectedCountry).flatMap(country => country.data.map(item => item[selectedSector])),\n      backgroundColor: 'rgba(75, 255, 192, 0.6)'\n    }, {\n      type: 'bar',\n      label: `${selectedCountry} - Annual CO2 Emissions`,\n      data: countries.filter(country => country.Entity === selectedCountry).flatMap(country => country.data.map(item => item.emissions)),\n      backgroundColor: 'rgba(192, 75, 192, 0.6)'\n    }, {\n      type: 'bar',\n      label: `${selectedCountry} - Forest Area`,\n      data: countries.filter(country => country.Entity === selectedCountry).flatMap(country => country.data.map(item => item.forestArea)),\n      backgroundColor: 'rgba(255, 67, 86, 0.6)'\n    }]\n  };\n  const chartOptions = {\n    responsive: true,\n    scales: {\n      y: {\n        type: 'linear',\n        grid: {\n          drawBorder: true,\n          drawOnChartArea: true,\n          drawTicks: true\n        },\n        ticks: {\n          display: true,\n          callback: function (value) {\n            return value.toString() + ' Mt';\n          }\n        }\n      },\n      x: {\n        grid: {\n          drawBorder: true,\n          drawOnChartArea: true,\n          drawTicks: true\n        },\n        ticks: {\n          display: true,\n          text: 'Year'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true\n      },\n      tooltip: {\n        enabled: true\n      },\n      scales: {\n        y: {\n          type: 'linear'\n        }\n      }\n    }\n  };\n\n  // console.log('chartData:', chartData); // Dodaj tę instrukcję console.log\n  // console.log('chartOptions:', chartOptions); // Dodaj tę instrukcję console.log\n\n  const calculatePercentages = () => {\n    if (selectedCountry) {\n      const countryData = countries.find(country => country.Entity === selectedCountry);\n      if (countryData) {\n        const countryDataLatest = countryData.data[countryData.data.length - 1];\n        if (countryDataLatest) {\n          const co2Percentage = (countryDataLatest.co2Percentage * 100).toFixed(2);\n          const industryPercentage = (countryDataLatest.industryPercentage * 100).toFixed(2);\n          const forestAreaPercentage = (countryDataLatest.forestAreaPercentage * 100).toFixed(2);\n          const averagePercentage = ((countryDataLatest.co2Percentage + countryDataLatest.industryPercentage + countryDataLatest.forestAreaPercentage) / 3 * 100).toFixed(2);\n          setCo2Percentage(co2Percentage);\n          setIndustryPercentage(industryPercentage);\n          setForestAreaPercentage(forestAreaPercentage);\n          setAveragePercentage(averagePercentage);\n          const tableDataCO2 = countryData.data.map(item => ({\n            year: item.Year,\n            value: item.emissions !== undefined ? item.emissions : 0\n          }));\n          const tableDataIndustry = countryData.data.map(item => ({\n            year: item.Year,\n            value: item.industry !== undefined ? item.industry : 0\n          }));\n          const tableDataForestArea = countryData.data.map(item => ({\n            year: item.Year,\n            value: item.forestArea !== undefined ? item.forestArea : 0\n          }));\n          const percentageCO2Industry = (countryDataLatest.co2Percentage / countryDataLatest.industryPercentage * 100).toFixed(2);\n          const percentageCO2ForestArea = (countryDataLatest.co2Percentage / countryDataLatest.forestAreaPercentage * 100).toFixed(2);\n          setTableDataCO2(tableDataCO2);\n          setTableDataIndustry(tableDataIndustry);\n          setTableDataForestArea(tableDataForestArea);\n          setPercentageCO2Industry(percentageCO2Industry);\n          setPercentageCO2ForestArea(percentageCO2ForestArea);\n\n          // console.log(tableDataCO2);\n          // console.log(tableDataIndustry);\n          // console.log(tableDataForestArea);\n          // console.log(percentageCO2Industry);\n          // console.log(percentageCO2ForestArea);\n        }\n      }\n    } else {\n      setCo2Percentage(0);\n      setIndustryPercentage(0);\n      setForestAreaPercentage(0);\n      setAveragePercentage(0);\n      setTableDataCO2([]);\n      setTableDataIndustry([]);\n      setTableDataForestArea([]);\n      setPercentageCO2Industry(0);\n      setPercentageCO2ForestArea(0);\n    }\n  };\n  useEffect(() => {\n    calculatePercentages();\n  }, [selectedCountry]);\n  const exportDataJSON = () => {\n    if (!isAuthenticated) {\n      toast.error('You need to log in to download this file');\n      return;\n    }\n    const data = {\n      country: selectedCountry,\n      sector: selectedSector,\n      co2Percentage: `${co2Percentage}%`,\n      industryPercentage: `${industryPercentage}%`,\n      forestAreaPercentage: `${forestAreaPercentage}%`,\n      averagePercentage: `${averagePercentage}%`,\n      sectorData: tableDataIndustry,\n      // Include the selected sector data\n      co2PercentageData: percentageCO2Industry,\n      // Include the CO2 emissions percentage\n      sectorPercentageData: tableDataCO2.map(item => ({\n        year: item.year,\n        percentage: (item.sectorValue / item.value * 100).toFixed(2) // Calculate the percentage of sector emissions in CO2 emissions\n      }))\n    };\n\n    const jsonData = JSON.stringify(data, null, 2);\n    const element = document.createElement('a');\n    const file = new Blob([jsonData], {\n      type: 'application/json'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = 'data.json';\n    document.body.appendChild(element); // Required for this to work in Firefox\n    element.click();\n  };\n  const exportDataYAML = () => {\n    if (!isAuthenticated) {\n      toast.error('You need to log in to download this file');\n      return;\n    }\n    const data = {\n      country: selectedCountry,\n      sector: selectedSector,\n      co2Percentage: `${co2Percentage}%`,\n      industryPercentage: `${industryPercentage}%`,\n      forestAreaPercentage: `${forestAreaPercentage}%`,\n      averagePercentage: `${averagePercentage}%`,\n      sectorData: tableDataIndustry,\n      // Include the selected sector data\n      co2PercentageData: percentageCO2Industry,\n      // Include the CO2 emissions percentage\n      sectorPercentageData: tableDataCO2.map(item => ({\n        year: item.year,\n        percentage: (item.sectorValue / item.value * 100).toFixed(2) // Calculate the percentage of sector emissions in CO2 emissions\n      }))\n    };\n\n    const yamlData = yaml.dump(data);\n    const element = document.createElement('a');\n    const file = new Blob([yamlData], {\n      type: 'text/plain'\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = 'data.yaml';\n    document.body.appendChild(element); // Required for this to work in Firefox\n    element.click();\n  };\n  const exportDataXML = () => {\n    // Dane do zapisania w pliku XML\n    const data = {\n      country: selectedCountry,\n      sector: selectedSector,\n      co2Percentage: `${co2Percentage}%`,\n      industryPercentage: `${industryPercentage}%`,\n      forestAreaPercentage: `${forestAreaPercentage}%`,\n      averagePercentage: `${averagePercentage}%`,\n      sectorData: tableDataIndustry,\n      // Include the selected sector data\n      co2PercentageData: percentageCO2Industry,\n      // Include the CO2 emissions percentage\n      sectorPercentageData: tableDataCO2.map(item => ({\n        year: item.year,\n        percentage: (item.sectorValue / item.value * 100).toFixed(2) // Calculate the percentage of sector emissions in CO2 emissions\n      }))\n    };\n\n    // Generowanie XML\n    const xml = generateXML(data);\n\n    // Tworzenie obiektu Blob\n    const blob = new Blob([xml], {\n      type: 'text/xml'\n    });\n\n    // Tworzenie linku do pobrania\n    const downloadLink = document.createElement('a');\n    downloadLink.href = URL.createObjectURL(blob);\n    downloadLink.download = 'output.xml';\n    downloadLink.click();\n\n    // Funkcja generująca XML\n    function generateXML(data) {\n      let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\n      xml += '<person>';\n\n      // Generowanie tagów dla każdego pola w danych\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          xml += `<${key}>${data[key]}</${key}>`;\n        }\n      }\n      xml += '</person>';\n      return xml;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.title,\n      children: \"CO2 concentrations in relation to industry size and forest area in different countries of the world.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.selectContainer,\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select Country:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedCountry,\n          onChange: handleCountryChange,\n          className: styles.select,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Country --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 25\n          }, this), countryOptions.map((country, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: country,\n            children: country\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.selectContainer,\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Select CO2 Sector:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedSector,\n          onChange: handleSectorChange,\n          className: styles.select,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Sector --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 25\n          }, this), sectorOptions.map((sector, sectorIndex) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: sector,\n            children: sector\n          }, sectorIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chartContainer,\n      children: sectorData.length > 0 ? /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 7\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isAuthenticated ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.exportButton,\n          onClick: exportDataJSON,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.exportButton,\n          onClick: exportDataYAML,\n          children: \"Export YAML\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.exportButton,\n          onClick: exportDataXML,\n          children: \"Export XML\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.disableButton,\n          disabled: true,\n          children: \"Export JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.disableButton,\n          disabled: true,\n          children: \"Export YAML\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.disableButton,\n          disabled: true,\n          children: \"Export XML\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 463,\n    columnNumber: 9\n  }, this);\n};\n_s(Chart, \"h814PP3dvAfQke2OZkO05oqybSc=\");\n_c = Chart;\nexport default Chart;\nvar _c;\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"names":["React","useState","useEffect","Bar","yaml","styles","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","Chart","_s","selectedCountry","setSelectedCountry","selectedSector","setSelectedSector","countries","setCountries","countryNames","setCountryNames","yearOptions","setYearOptions","sectorOptions","setSectorOptions","co2Percentage","setCo2Percentage","industryPercentage","setIndustryPercentage","forestAreaPercentage","setForestAreaPercentage","averagePercentage","setAveragePercentage","sectorData","setSectorData","tableDataCO2","setTableDataCO2","tableDataIndustry","setTableDataIndustry","tableDataForestArea","setTableDataForestArea","percentageCO2Industry","setPercentageCO2Industry","percentageCO2ForestArea","setPercentageCO2ForestArea","isAuthenticated","localStorage","getItem","fetchData","responseCO2Emissions","fetch","responseCO2EmissionsBySector","responseForestArea","ok","Error","dataCO2Emissions","json","dataCO2EmissionsBySector","dataForestArea","mergeCountries","co2EmissionsData","co2EmissionsBySectorData","forestAreaData","mergedData","forEach","country","Entity","Year","emissions","co2EmissionsBySector","find","sector","forestArea","forest","countryData","Buildings","Industry","Transport","data","push","showInfo","Object","values","mergedCountries","co2EmissionByCountryData","getYearOptions","getCountryNames","getSectorOptions","filteredSectorData","map","selectedCountryData","console","log","sectorValue","name","value","undefined","error","countryOptions","Array","from","Set","years","uniqueYears","sectors","reduce","options","keys","key","startsWith","handleCountryChange","event","target","handleSectorChange","chartData","labels","datasets","type","label","filter","flatMap","item","backgroundColor","chartOptions","responsive","scales","y","grid","drawBorder","drawOnChartArea","drawTicks","ticks","display","callback","toString","x","text","plugins","legend","tooltip","enabled","calculatePercentages","countryDataLatest","length","toFixed","year","industry","exportDataJSON","co2PercentageData","sectorPercentageData","percentage","jsonData","JSON","stringify","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","exportDataYAML","yamlData","dump","exportDataXML","xml","generateXML","blob","downloadLink","hasOwnProperty","className","container","children","title","fileName","_jsxFileName","lineNumber","columnNumber","selectContainer","onChange","select","index","sectorIndex","chartContainer","exportButton","onClick","disableButton","disabled","_c","$RefreshReg$"],"sources":["C:/Users/maksi/Documents/Semestr 6/IS/Projekt/frontend/src/Diagrams/Diagram.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport yaml from 'js-yaml';\r\nimport styles from \"./diagram.module.css\"\r\nimport 'chart.js/auto';\r\nimport { toast } from 'react-toastify'\r\n\r\n\r\nconst Chart = () => {\r\n    const [selectedCountry, setSelectedCountry] = useState('');\r\n    const [selectedSector, setSelectedSector] = useState('');\r\n    const [countries, setCountries] = useState([]);\r\n    const [countryNames, setCountryNames] = useState([]);\r\n    const [yearOptions, setYearOptions] = useState([]);\r\n    const [sectorOptions, setSectorOptions] = useState([]);\r\n    const [co2Percentage, setCo2Percentage] = useState(0);\r\n    const [industryPercentage, setIndustryPercentage] = useState(0);\r\n    const [forestAreaPercentage, setForestAreaPercentage] = useState(0);\r\n    const [averagePercentage, setAveragePercentage] = useState(0);\r\n    const [sectorData, setSectorData] = useState([]);\r\n    const [tableDataCO2, setTableDataCO2] = useState([]);\r\n    const [tableDataIndustry, setTableDataIndustry] = useState([]);\r\n    const [tableDataForestArea, setTableDataForestArea] = useState([]);\r\n    const [percentageCO2Industry, setPercentageCO2Industry] = useState(0);\r\n    const [percentageCO2ForestArea, setPercentageCO2ForestArea] = useState(0);\r\n    const isAuthenticated = localStorage.getItem('token');\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const responseCO2Emissions = await fetch('http://localhost:3000/api/co2-emissions');\r\n                const responseCO2EmissionsBySector = await fetch('http://localhost:3000/api/co2-emissions-by-sector');\r\n                const responseForestArea = await fetch('http://localhost:3000/api/forest-area');\r\n\r\n                if (\r\n                    !responseCO2Emissions.ok ||\r\n                    !responseCO2EmissionsBySector.ok ||\r\n                    !responseForestArea.ok\r\n                ) {\r\n                    throw new Error('Network error');\r\n                }\r\n\r\n                const dataCO2Emissions = await responseCO2Emissions.json();\r\n                const dataCO2EmissionsBySector = await responseCO2EmissionsBySector.json();\r\n                const dataForestArea = await responseForestArea.json();\r\n\r\n                const mergeCountries = (\r\n                    co2EmissionsData,\r\n                    co2EmissionsBySectorData,\r\n                    forestAreaData\r\n                ) => {\r\n                    const mergedData = {};\r\n                    co2EmissionsData.forEach((country) => {\r\n                        const { Entity, Year, 'Annual CO2 emissions': emissions } = country;\r\n\r\n                        const co2EmissionsBySector = co2EmissionsBySectorData.find(\r\n                            (sector) => sector.Entity === Entity && sector.Year === Year\r\n                        );\r\n\r\n                        const forestArea = forestAreaData.find(\r\n                            (forest) => forest.Entity === Entity && forest.Year === Year\r\n                        );\r\n\r\n                        const countryData = {\r\n                            Year,\r\n                            emissions,\r\n                            Buildings: co2EmissionsBySector ? co2EmissionsBySector.Buildings : 0,\r\n                            Industry: co2EmissionsBySector ? co2EmissionsBySector.Industry : 0,\r\n                            'Land-use change and forestry': co2EmissionsBySector ? co2EmissionsBySector['Land-use change and forestry'] : 0,\r\n                            'Other fuel combustion': co2EmissionsBySector ? co2EmissionsBySector['Other fuel combustion'] : 0,\r\n                            Transport: co2EmissionsBySector ? co2EmissionsBySector.Transport : 0,\r\n                            'Manufacturing and construction': co2EmissionsBySector ? co2EmissionsBySector['Manufacturing and construction'] : 0,\r\n                            'Electricity and heat': co2EmissionsBySector ? co2EmissionsBySector['Electricity and heat'] : 0,\r\n                            forestArea: forestArea ? forestArea['Forest area'] : 0,\r\n\r\n                        };\r\n\r\n                        if (Entity in mergedData) {\r\n                            mergedData[Entity].data.push(countryData);\r\n                        } else {\r\n                            mergedData[Entity] = {\r\n                                Entity,\r\n                                showInfo: true,\r\n                                data: [countryData],\r\n                            };\r\n                        }\r\n                    });\r\n\r\n                    return Object.values(mergedData);\r\n                };\r\n\r\n                const mergedCountries = mergeCountries(\r\n                    dataCO2Emissions.co2EmissionByCountryData,\r\n                    dataCO2EmissionsBySector,\r\n                    dataForestArea\r\n                );\r\n\r\n                setCountries(mergedCountries);\r\n\r\n                const yearOptions = getYearOptions(dataCO2Emissions.co2EmissionByCountryData);\r\n                setYearOptions(yearOptions);\r\n\r\n                const countryNames = getCountryNames(dataCO2Emissions.co2EmissionByCountryData);\r\n                setCountryNames(countryNames);\r\n\r\n\r\n                const sectorOptions = getSectorOptions(dataCO2EmissionsBySector);\r\n                setSectorOptions(sectorOptions);\r\n\r\n                const filteredSectorData = mergedCountries.map((country) => {\r\n                    const selectedCountryData = country.data.find((data) => data.Year === selectedCountry);\r\n                    console.log(selectedCountryData);\r\n                    const sectorValue = selectedCountryData && selectedCountryData[selectedSector];\r\n                    return {\r\n                        name: country.Entity,\r\n                        value: sectorValue !== undefined ? sectorValue : 0,\r\n                    };\r\n                });\r\n                console.log('Merged Countries:', mergedCountries);\r\n                console.log('filteredSectorData:', filteredSectorData); // Добавьте эту строку\r\n\r\n                setSectorData(filteredSectorData);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const countryOptions = Array.from(new Set(countryNames));\r\n    const getYearOptions = (co2EmissionsData) => {\r\n        const years = co2EmissionsData.map((country) => country.Year);\r\n        const uniqueYears = [...new Set(years)];\r\n        return uniqueYears;\r\n    };\r\n\r\n    const getCountryNames = (co2EmissionsData) => {\r\n        const countryNames = co2EmissionsData.map((country) => country.Entity);\r\n        return countryNames;\r\n    };\r\n\r\n    const getSectorOptions = (co2EmissionsBySectorData) => {\r\n        const sectors = co2EmissionsBySectorData.reduce((options, country) => {\r\n            Object.keys(country).forEach((key) => {\r\n                if (\r\n                    key !== 'Entity' &&\r\n                    key !== 'Year' &&\r\n                    key !== 'Code' &&\r\n                    key !== '_id' &&\r\n                    !key.startsWith('$')\r\n                ) {\r\n                    options[key] = country[key];\r\n                }\r\n            });\r\n            return options;\r\n        }, {});\r\n        console.log('Sectors:', sectors);\r\n\r\n        return Object.keys(sectors);\r\n    };\r\n\r\n    const handleCountryChange = (event) => {\r\n        setSelectedCountry(event.target.value);\r\n    };\r\n\r\n    const handleSectorChange = (event) => {\r\n        setSelectedSector(event.target.value);\r\n        console.log('Selected Sector:', event.target.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const filteredSectorData = countries.map((country) => {\r\n            const selectedCountryData = country.data.find((data) => data.Year === selectedCountry);\r\n            return {\r\n                name: country.Entity,\r\n                value: selectedCountryData ? selectedCountryData[selectedSector] : 0,\r\n            };\r\n        });\r\n\r\n        setSectorData(filteredSectorData);\r\n    }, [selectedCountry, selectedSector, countries]);\r\n\r\n\r\n    const chartData = {\r\n        labels: yearOptions,\r\n        datasets: [\r\n            {\r\n                type: 'bar',\r\n                label: `${selectedCountry} - ${selectedSector}`,\r\n                data: countries\r\n                  .filter((country) => country.Entity === selectedCountry)\r\n                  .flatMap((country) => country.data.map((item) => item[selectedSector])),\r\n                backgroundColor: 'rgba(75, 255, 192, 0.6)',\r\n              },\r\n            {\r\n                type: 'bar',\r\n                label: `${selectedCountry} - Annual CO2 Emissions`,\r\n                data: countries\r\n                    .filter((country) => country.Entity === selectedCountry)\r\n                    .flatMap((country) => country.data.map((item) => item.emissions)),\r\n                backgroundColor: 'rgba(192, 75, 192, 0.6)',\r\n            },\r\n            {\r\n                type: 'bar',\r\n                label: `${selectedCountry} - Forest Area`,\r\n                data: countries\r\n                    .filter((country) => country.Entity === selectedCountry)\r\n                    .flatMap((country) => country.data.map((item) => item.forestArea)),\r\n                backgroundColor: 'rgba(255, 67, 86, 0.6)',\r\n            },\r\n        ],\r\n    };\r\n\r\n\r\n    const chartOptions = {\r\n        responsive: true,\r\n        scales: {\r\n            y: {\r\n                type: 'linear',\r\n                grid: {\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: true,\r\n                },\r\n                ticks: {\r\n                    display: true,\r\n                    callback: function (value) {\r\n                        return value.toString() + ' Mt';\r\n                    },\r\n                },\r\n            },\r\n            x: {\r\n                grid: {\r\n                    drawBorder: true,\r\n                    drawOnChartArea: true,\r\n                    drawTicks: true,\r\n                },\r\n                ticks: {\r\n                    display: true,\r\n                    text: 'Year',\r\n                },\r\n            },\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                display: true,\r\n            },\r\n            tooltip: {\r\n                enabled: true,\r\n            },\r\n            scales: {\r\n                y: {\r\n                    type: 'linear',\r\n                },\r\n            },\r\n        },\r\n    };\r\n\r\n    // console.log('chartData:', chartData); // Dodaj tę instrukcję console.log\r\n    // console.log('chartOptions:', chartOptions); // Dodaj tę instrukcję console.log\r\n\r\n\r\n\r\n    const calculatePercentages = () => {\r\n        if (selectedCountry) {\r\n            const countryData = countries.find((country) => country.Entity === selectedCountry);\r\n            if (countryData) {\r\n                const countryDataLatest = countryData.data[countryData.data.length - 1];\r\n\r\n                if (countryDataLatest) {\r\n                    const co2Percentage = (countryDataLatest.co2Percentage * 100).toFixed(2);\r\n                    const industryPercentage = (countryDataLatest.industryPercentage * 100).toFixed(2);\r\n                    const forestAreaPercentage = (countryDataLatest.forestAreaPercentage * 100).toFixed(2);\r\n                    const averagePercentage = (\r\n                        (countryDataLatest.co2Percentage +\r\n                            countryDataLatest.industryPercentage +\r\n                            countryDataLatest.forestAreaPercentage) /\r\n                        3 *\r\n                        100\r\n                    ).toFixed(2);\r\n\r\n                    setCo2Percentage(co2Percentage);\r\n                    setIndustryPercentage(industryPercentage);\r\n                    setForestAreaPercentage(forestAreaPercentage);\r\n                    setAveragePercentage(averagePercentage);\r\n\r\n                    const tableDataCO2 = countryData.data.map((item) => ({\r\n                        year: item.Year,\r\n                        value: item.emissions !== undefined ? item.emissions : 0,\r\n\r\n                    }));\r\n\r\n\r\n                    const tableDataIndustry = countryData.data.map((item) => ({\r\n                        year: item.Year,\r\n                        value: item.industry !== undefined ? item.industry : 0,\r\n                    }));\r\n\r\n                    const tableDataForestArea = countryData.data.map((item) => ({\r\n                        year: item.Year,\r\n                        value: item.forestArea !== undefined ? item.forestArea : 0,\r\n                    }));\r\n\r\n                    const percentageCO2Industry = (\r\n                        (countryDataLatest.co2Percentage / countryDataLatest.industryPercentage) *\r\n                        100\r\n                    ).toFixed(2);\r\n\r\n                    const percentageCO2ForestArea = (\r\n                        (countryDataLatest.co2Percentage / countryDataLatest.forestAreaPercentage) *\r\n                        100\r\n                    ).toFixed(2);\r\n\r\n                    setTableDataCO2(tableDataCO2);\r\n                    setTableDataIndustry(tableDataIndustry);\r\n                    setTableDataForestArea(tableDataForestArea);\r\n                    setPercentageCO2Industry(percentageCO2Industry);\r\n                    setPercentageCO2ForestArea(percentageCO2ForestArea);\r\n\r\n                    // console.log(tableDataCO2);\r\n                    // console.log(tableDataIndustry);\r\n                    // console.log(tableDataForestArea);\r\n                    // console.log(percentageCO2Industry);\r\n                    // console.log(percentageCO2ForestArea);\r\n                }\r\n            }\r\n        } else {\r\n            setCo2Percentage(0);\r\n            setIndustryPercentage(0);\r\n            setForestAreaPercentage(0);\r\n            setAveragePercentage(0);\r\n            setTableDataCO2([]);\r\n            setTableDataIndustry([]);\r\n            setTableDataForestArea([]);\r\n            setPercentageCO2Industry(0);\r\n            setPercentageCO2ForestArea(0);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        calculatePercentages();\r\n    }, [selectedCountry]);\r\n\r\n\r\n    const exportDataJSON = () => {\r\n\r\n        if (!isAuthenticated) {\r\n            toast.error('You need to log in to download this file');\r\n            return;\r\n        }\r\n\r\n        const data = {\r\n            country: selectedCountry,\r\n            sector: selectedSector,\r\n            co2Percentage: `${co2Percentage}%`,\r\n            industryPercentage: `${industryPercentage}%`,\r\n            forestAreaPercentage: `${forestAreaPercentage}%`,\r\n            averagePercentage: `${averagePercentage}%`,\r\n            sectorData: tableDataIndustry, // Include the selected sector data\r\n            co2PercentageData: percentageCO2Industry, // Include the CO2 emissions percentage\r\n            sectorPercentageData: tableDataCO2.map((item) => ({\r\n                year: item.year,\r\n                percentage: ((item.sectorValue / item.value) * 100).toFixed(2), // Calculate the percentage of sector emissions in CO2 emissions\r\n            })),\r\n        };\r\n\r\n        const jsonData = JSON.stringify(data, null, 2);\r\n        const element = document.createElement('a');\r\n        const file = new Blob([jsonData], { type: 'application/json' });\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = 'data.json';\r\n        document.body.appendChild(element); // Required for this to work in Firefox\r\n        element.click();\r\n    };\r\n\r\n    const exportDataYAML = () => {\r\n\r\n        if (!isAuthenticated) {\r\n            toast.error('You need to log in to download this file');\r\n            return;\r\n        }\r\n\r\n        const data = {\r\n            country: selectedCountry,\r\n            sector: selectedSector,\r\n            co2Percentage: `${co2Percentage}%`,\r\n            industryPercentage: `${industryPercentage}%`,\r\n            forestAreaPercentage: `${forestAreaPercentage}%`,\r\n            averagePercentage: `${averagePercentage}%`,\r\n            sectorData: tableDataIndustry, // Include the selected sector data\r\n            co2PercentageData: percentageCO2Industry, // Include the CO2 emissions percentage\r\n            sectorPercentageData: tableDataCO2.map((item) => ({\r\n                year: item.year,\r\n                percentage: ((item.sectorValue / item.value) * 100).toFixed(2), // Calculate the percentage of sector emissions in CO2 emissions\r\n            })),\r\n        };\r\n\r\n        const yamlData = yaml.dump(data);\r\n        const element = document.createElement('a');\r\n        const file = new Blob([yamlData], { type: 'text/plain' });\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = 'data.yaml';\r\n        document.body.appendChild(element); // Required for this to work in Firefox\r\n        element.click();\r\n\r\n    };\r\n\r\n    const exportDataXML = () => {\r\n\r\n\r\n        // Dane do zapisania w pliku XML\r\n        const data = {\r\n            country: selectedCountry,\r\n            sector: selectedSector,\r\n            co2Percentage: `${co2Percentage}%`,\r\n            industryPercentage: `${industryPercentage}%`,\r\n            forestAreaPercentage: `${forestAreaPercentage}%`,\r\n            averagePercentage: `${averagePercentage}%`,\r\n            sectorData: tableDataIndustry, // Include the selected sector data\r\n            co2PercentageData: percentageCO2Industry, // Include the CO2 emissions percentage\r\n            sectorPercentageData: tableDataCO2.map((item) => ({\r\n                year: item.year,\r\n                percentage: ((item.sectorValue / item.value) * 100).toFixed(2), // Calculate the percentage of sector emissions in CO2 emissions\r\n            })),\r\n        };\r\n\r\n        // Generowanie XML\r\n        const xml = generateXML(data);\r\n\r\n        // Tworzenie obiektu Blob\r\n        const blob = new Blob([xml], { type: 'text/xml' });\r\n\r\n        // Tworzenie linku do pobrania\r\n        const downloadLink = document.createElement('a');\r\n        downloadLink.href = URL.createObjectURL(blob);\r\n        downloadLink.download = 'output.xml';\r\n        downloadLink.click();\r\n\r\n\r\n\r\n        // Funkcja generująca XML\r\n        function generateXML(data) {\r\n            let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>';\r\n            xml += '<person>';\r\n\r\n            // Generowanie tagów dla każdego pola w danych\r\n            for (const key in data) {\r\n                if (data.hasOwnProperty(key)) {\r\n                    xml += `<${key}>${data[key]}</${key}>`;\r\n                }\r\n            }\r\n\r\n            xml += '</person>';\r\n\r\n            return xml;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <h2 className={styles.title}>CO2 concentrations in relation to industry size and forest area in different countries of the world.</h2>\r\n\r\n            <div className={styles.selectContainer}>\r\n                <label>\r\n                    Select Country:\r\n                    <select\r\n                        value={selectedCountry}\r\n                        onChange={handleCountryChange}\r\n                        className={styles.select}\r\n                    >\r\n                        <option value=\"\">-- Select Country --</option>\r\n                        {countryOptions.map((country, index) => (\r\n                            <option value={country} key={index}>\r\n                                {country}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </label>\r\n            </div>\r\n\r\n            <div className={styles.selectContainer}>\r\n                <label>\r\n                    Select CO2 Sector:\r\n                    <select\r\n                        value={selectedSector}\r\n                        onChange={handleSectorChange}\r\n                        className={styles.select}\r\n                    >\r\n                        <option value=\"\">-- Select Sector --</option>\r\n                        {sectorOptions.map((sector, sectorIndex) => (\r\n                            <option value={sector} key={sectorIndex}>\r\n                                {sector}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </label>\r\n            </div>\r\n\r\n            <div className={styles.chartContainer}>\r\n            {sectorData.length > 0 ? (\r\n      <Bar data={chartData} options={chartOptions} />\r\n    ) : (\r\n      <div>No data available</div>\r\n    )}\r\n            </div>\r\n            <>\r\n                {isAuthenticated ? (\r\n                    <>\r\n\r\n                        <button className={styles.exportButton} onClick={exportDataJSON}>\r\n                            Export JSON\r\n                        </button>\r\n                        <button className={styles.exportButton} onClick={exportDataYAML}>\r\n                            Export YAML\r\n                        </button>\r\n                        <button className={styles.exportButton} onClick={exportDataXML}>\r\n                            Export XML\r\n                        </button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <button className={styles.disableButton} disabled>\r\n                            Export JSON\r\n                        </button>\r\n                        <button className={styles.disableButton} disabled>\r\n                            Export YAML\r\n                        </button>\r\n                        <button className={styles.disableButton} disabled>\r\n                            Export XML\r\n                        </button>\r\n                    </>\r\n                )}\r\n            </>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}